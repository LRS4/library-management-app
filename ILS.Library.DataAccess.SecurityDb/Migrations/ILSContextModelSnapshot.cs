// <auto-generated />
using System;
using ILS.Library.DataAccess.SecurityDb.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ILS.Library.DataAccess.SecurityDb.Migrations
{
    [DbContext(typeof(ILSContext))]
    partial class ILSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Asset.Checkout", b =>
                {
                    b.Property<int>("CheckoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LibraryAssetId")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryCardId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Since")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("datetime");

                    b.HasKey("CheckoutId");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("Checkout","Asset");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Asset.CheckoutHistory", b =>
                {
                    b.Property<int>("CheckoutHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CheckedIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CheckedOut")
                        .HasColumnType("datetime");

                    b.Property<int>("LibraryAssetId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryCardId")
                        .HasColumnType("int");

                    b.HasKey("CheckoutHistoryId");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("CheckoutHistory","Asset");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Asset.Hold", b =>
                {
                    b.Property<int>("HoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("HoldPlaced")
                        .HasColumnType("datetime");

                    b.Property<int?>("LibraryAssetId")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryCardId")
                        .HasColumnType("int");

                    b.HasKey("HoldId");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("Hold","Asset");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Asset.LibraryAsset", b =>
                {
                    b.Property<int>("LibraryAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LibraryAssetId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnName("Author")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<string>("DeweyIndex")
                        .HasColumnName("DeweyIndex")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnName("Discriminator")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ISBN")
                        .HasColumnName("ISBN")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LibraryCardId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfCopies")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Year")
                        .HasColumnName("Year")
                        .HasColumnType("int");

                    b.HasKey("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("LibraryAsset","Asset");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Asset.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusId")
                        .HasColumnType("int")
                        .HasComment("The surrogate primary key for this table.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The description of the asset status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the status.")
                        .HasMaxLength(50);

                    b.HasKey("StatusId");

                    b.ToTable("Status","Asset");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Branch.BranchDetails", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("BranchId");

                    b.ToTable("BranchDetails","Branch");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Branch.BranchHours", b =>
                {
                    b.Property<int>("BranchHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BranchHoursId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasComment("Identifier for the branch in which the hours belong to.");

                    b.Property<int>("CloseTime")
                        .HasColumnType("int")
                        .HasComment("The closing time of the branch.");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int")
                        .HasComment("The days of the week that the branch is open.");

                    b.Property<int>("OpenTime")
                        .HasColumnType("int")
                        .HasComment("The hour at which the branch opens.");

                    b.HasKey("BranchHoursId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchHours","Branch");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Branch.LibraryCard", b =>
                {
                    b.Property<int>("LibraryCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The surrogate primary key for this table.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasComment("The date and time when the library card was issued.");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(19, 4)")
                        .HasComment("Any outstanding fees on the library card.");

                    b.HasKey("LibraryCardId");

                    b.ToTable("LibraryCard","Branch");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Comms.Notices", b =>
                {
                    b.Property<int>("NoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NoticeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NoticeId");

                    b.ToTable("Notices","Comms");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Users.Patron", b =>
                {
                    b.Property<int>("PatronId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Surrogate primary key for this table.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The address of the patron.");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The date of birth of the patron.");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The first name of the patron.");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("HomeLibraryBranchId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The last name of the patron.");

                    b.Property<int>("LibraryCardId")
                        .HasColumnType("int");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The contact telephone number of the patron.")
                        .HasMaxLength(50);

                    b.HasKey("PatronId");

                    b.HasIndex("HomeLibraryBranchId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("Patron","Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Asset.Checkout", b =>
                {
                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Asset.LibraryAsset", "LibraryAsset")
                        .WithMany("Checkout")
                        .HasForeignKey("LibraryAssetId")
                        .HasConstraintName("FK_Checkout_LibraryAssetId")
                        .IsRequired();

                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Branch.LibraryCard", "LibraryCard")
                        .WithMany("Checkout")
                        .HasForeignKey("LibraryCardId")
                        .HasConstraintName("FK_Checkout_LibraryCardId");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Asset.CheckoutHistory", b =>
                {
                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Asset.LibraryAsset", "LibraryAsset")
                        .WithMany("CheckoutHistory")
                        .HasForeignKey("LibraryAssetId")
                        .HasConstraintName("FK_CheckoutHistory_LibraryAssetId")
                        .IsRequired();

                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Branch.LibraryCard", "LibraryCard")
                        .WithMany("CheckoutHistory")
                        .HasForeignKey("LibraryCardId")
                        .HasConstraintName("FK_CheckoutHistory_LibraryCardId")
                        .IsRequired();
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Asset.Hold", b =>
                {
                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Asset.LibraryAsset", "LibraryAsset")
                        .WithMany("Hold")
                        .HasForeignKey("LibraryAssetId")
                        .HasConstraintName("FK_Hold_LibraryAssetId");

                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Branch.LibraryCard", "LibraryCard")
                        .WithMany("Hold")
                        .HasForeignKey("LibraryCardId")
                        .HasConstraintName("FK_Hold_LibraryCardId");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Asset.LibraryAsset", b =>
                {
                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Branch.LibraryCard", "LibraryCard")
                        .WithMany("LibraryAsset")
                        .HasForeignKey("LibraryCardId")
                        .HasConstraintName("FK_LibraryAsset_LibraryCardId");

                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Branch.BranchDetails", "Location")
                        .WithMany("LibraryAsset")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_LibraryAsset_LocationId");

                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Asset.Status", "Status")
                        .WithMany("LibraryAsset")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_LibraryAsset_StatusId")
                        .IsRequired();
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Branch.BranchHours", b =>
                {
                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Branch.BranchDetails", "Branch")
                        .WithMany("BranchHours")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_BranchHours_BranchId");
                });

            modelBuilder.Entity("ILS.Library.DataAccess.SecurityDb.Entities.Users.Patron", b =>
                {
                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Branch.BranchDetails", "HomeLibraryBranch")
                        .WithMany("Patron")
                        .HasForeignKey("HomeLibraryBranchId")
                        .HasConstraintName("FK_Patron_HomeLibraryBranchId")
                        .IsRequired();

                    b.HasOne("ILS.Library.DataAccess.SecurityDb.Entities.Branch.LibraryCard", "LibraryCard")
                        .WithMany("Patron")
                        .HasForeignKey("LibraryCardId")
                        .HasConstraintName("FK_Patron_LibraryCardId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
